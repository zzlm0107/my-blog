import{_ as n,p as s,q as a,a1 as e}from"./framework-5866ffd3.js";const t={},p=e(`<h2 id="什么是构建工具" tabindex="-1"><a class="header-anchor" href="#什么是构建工具" aria-hidden="true">#</a> 什么是构建工具</h2><blockquote><p>浏览器他只认识html, css, js</p></blockquote><p>企业级项目里都可能会具备哪些功能</p><ol><li>typescript: 如果遇到ts文件我们需要使用tsc将typescript代码转换为js代码</li><li>React/Vue: 安装react-compiler / vue-complier, 将我们写的jsx文件或者.vue文件转换为render函数</li><li>less/sass/postcss/component-style: 我们又需要安装less-loader, sass-loader等一系列编译工具</li><li>语法降级: babel ---&gt; 将es的新语法转换旧版浏览器可以接受的语法</li><li>体积优化: uglifyjs ---&gt; 将我们的代码进行压缩变成体积更小性能更高的文件</li><li>.....</li></ol><p>稍微改一点点东西, 非常麻烦</p><p>将App.tsx ---&gt; tsc ---&gt; App.jsx ---&gt; React-complier ---&gt; js文件</p><p>希望有一个东西能够帮你把tsc, react-compiler, less, babel, uglifyjs全部集成到一起，这个东西就叫做<strong>构建工具</strong></p><p>一个构建工具的功能:</p><ol><li>模块化开发支持: 支持直接从node_modules里引入代码 + 多种模块化支持</li><li>处理代码兼容性: 比如babel语法降级, less,ts 语法转换(<strong>不是构建工具做的, 构建工具将这些语法对应的处理工具集成进来自动化处理</strong>)</li><li>提高项目性能: 压缩文件, <strong>代码分割</strong></li><li>优化开发体验: <ul><li>构建工具会帮你自动监听文件的变化, 当文件变化以后自动帮你调用对应的集成工具进行重新打包, 然后再浏览器重新运行（整个过程叫做热更新, hot replacement</li><li>开发服务器: 跨域的问题, 用react-cli create-react-element vue-cli 解决跨域的问题,</li></ul></li></ol><p>构建工具他让我们可以不用每次都关心我们的代码在浏览器如何运行, 我们只需要首次给构建工具提供一个配置文件(这个配置文件也不是必须的, 如果你不给他 他会有默认的帮你去处理), 有了这个集成的配置文件以后, 我们就可以在下次需要更新的时候调用一次对应的命令就好了, 如果我们再结合热更新, 我们就更加不需要管任何东西, 这就是构建工具去做的东西, <strong>他让我们不用关心生产的代码也不用关心代码如何在浏览器运行, 只需要关心我们的开发怎么写的爽怎么写就好了</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 构建工具按顺序依次编译执行命令</span>
tsc xxx babel xxx <span class="token function">less</span> xxx
webpack
<span class="token punctuation">..</span>. 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>市面上主流的构建工具有哪些:</p><ul><li>webpack</li><li>vite</li><li>parcel</li><li>esbuild</li><li>rollup</li><li>grunt</li><li>gulp</li></ul><h2 id="vite相较于webpack的优势" tabindex="-1"><a class="header-anchor" href="#vite相较于webpack的优势" aria-hidden="true">#</a> vite相较于webpack的优势</h2><p>vite官方文档: https://cn.vitejs.dev/guide/why.html#the-problems</p><p>然而，当我们开始构建越来越大型的应用时，需要处理的 JavaScript 代码量也呈指数级增长。包含数千个模块的大型项目相当普遍。我们开始遇到性能瓶颈 —— 使用 JavaScript 开发工具（构建工具）通常需要很长时间（甚至是几分钟！）才能启动开发服务器，即使使用 HMR(热更新)，文件修改后的效果也需要几秒钟才能在浏览器中反映出来。如此循环往复，迟钝的反馈会极大地影响开发者的开发效率和幸福感。</p><p>起因: 我们的项目越大 ----&gt; 构建工具（webpack）所要处理的js代码就越多 【跟webpack的一个构建过程（工作流程）有关系】</p><p>造成的结果: 构建工具需要很长时间才能启动开发服务器</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yarn start
yarn dev

npm run dev 
npm run start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>webpack能不能改? 如果一旦要改 那么将会动到webpack的大动脉</p><p>webpack支持多种模块化: 你的工程可能不只是跑在浏览器端</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token comment">// 这一段代码最终会到浏览器里去运行</span>
<span class="token keyword">const</span> lodash <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;lodash&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// commonjs 规范</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span> <span class="token comment">// es6 module</span>

<span class="token comment">// webpack是允许我们写多种模块化规范的代码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>webpack的编译原理, AST 抽象语法分析的工具 分析出你写的这个js文件有哪些导入和导出操作 构建工具是运行在服务端的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack对上述代码的一个转换结果</span>
<span class="token keyword">const</span> lodash <span class="token operator">=</span> <span class="token function">webpack_require</span><span class="token punctuation">(</span><span class="token string">&quot;lodash&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Vue <span class="token operator">=</span> <span class="token function">webpack_require</span><span class="token punctuation">(</span><span class="token string">&quot;vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为webpack支持多种模块化, 他一开始必须要统一模块化代码, 所以意味着他需要将所有的依赖全部读一遍</p><p>vite会不会直接把webpack干翻, vite是基于es modules的, 侧重点不一样, webpack更多的关注兼容性, 而vite关注浏览器端的开发体验</p><h2 id="搭建vite工程" tabindex="-1"><a class="header-anchor" href="#搭建vite工程" aria-hidden="true">#</a> 搭建vite工程</h2><p>vite官网搭建工程指南: https://cn.vitejs.dev/guide/</p><ul><li><p>使用自选配置去构建vite项目</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> create vite@latest

<span class="token function">yarn</span> create vite
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会先安装vite的脚手架 create-vite，然后执行相关配置使用脚手架开启构建。</p><p>官网提供了多种预设可供选择：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># npm 6.x</span>
<span class="token function">npm</span> create vite@latest my-vue-app <span class="token parameter variable">--template</span> vue

<span class="token comment"># npm 7+, extra double-dash is needed:</span>
<span class="token function">npm</span> create vite@latest my-vue-app -- <span class="token parameter variable">--template</span> vue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>vite是一个构建工具，而create-vite是它的脚手架，脚手架内置了vite</p><p>webpack是构建工具，而webpack-cli是一个内置了webpack的脚手架（相当于）</p></li></ul><h2 id="vite的模块预加载" tabindex="-1"><a class="header-anchor" href="#vite的模块预加载" aria-hidden="true">#</a> vite的模块预加载</h2><p>当我们使用 <code>npm init -y</code> 初始化package.json时，安装各种包后在js文件直接import引入使用浏览器是不会读取到的，因为浏览器并不会去读取 node_modules 里的文件，当然不会找到引入的包。</p><p>（原因：如果能读取node_modules 里的包，那包里也会有其他依赖，层层嵌套，导致性能爆炸）</p><p>此时我们可以通过 <code>npm install vite</code> 安装vite，向package.json里的scripts配置添加命令，命令运行vite，就可以让vite开启本地服务器，能顺利读到node_modules里的包，那vite的模块加载机制是如何实现的呢？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">&quot;lodash&quot;</span><span class="token punctuation">;</span> <span class="token comment">// lodash可能也import了其他的东西</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>vite在处理的过程中如果说看到了有非绝对路径或者相对路径的引用, 他则会尝试开启路径补全</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">&quot;/node_modules/.vite/lodash&quot;</span><span class="token punctuation">;</span> <span class="token comment">// lodash可能也import了其他的东西</span>

<span class="token keyword">import</span> __vite__cjsImport0_lodash <span class="token keyword">from</span> <span class="token string">&quot;/node_modules/.vite/deps/lodash.js?v=ebe57916&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>找寻依赖的过程是自当前目录依次向上查找的过程, 直到搜寻到根目录或者搜寻到对应依赖为止</p><p>因为我们无法得知所引用的库是 commonJS 规范导出还是 ES6 module规范导出，所以vite就需要使用 <strong>依赖预构建</strong> 解决： <strong>依赖预构建</strong>: 首先vite会找到对应的依赖, 然后调用esbuild(对js语法进行处理的一个库), 将其他规范的代码转换成esmodule规范, 然后放到当前目录下的node_modules/.vite/deps, 同时对esmodule规范的各个模块进行统一集成</p><p>他解决了3个问题:</p><ol><li>不同的第三方包会有不同的导出格式(这个是vite没法约束人家的事情)</li><li>对路径的处理上可以直接使用.vite/deps, 方便路径重写</li><li>网络多包传输的性能问题(也是原生esmodule规范不敢支持node_modules的原因之一), 有了依赖预构建以后无论他有多少的额外export 和import, vite都会尽可能的将他们进行集成最后只生成一个或者几个模块，而不是每个包的每个依赖都单独引入。</li></ol><h2 id="vite环境变量配置" tabindex="-1"><a class="header-anchor" href="#vite环境变量配置" aria-hidden="true">#</a> vite环境变量配置</h2><blockquote><p>环境变量: 会根据当前的代码环境产生值的变化的变量就叫做环境变量</p></blockquote><p>代码环境:</p><ol><li>开发环境</li><li>测试环境</li><li>预发布环境</li><li>灰度环境</li><li>生产环境</li></ol><p>默认环境文件命名：</p><p>.env: 所有环境都需要用到的环境变量</p><p>.env.development: 开发环境需要用到的环境变量(默认情况下vite将我们的开发环境取名为development)</p><p>.env.production: 生产环境需要用到的环境变量(默认情况下vite将我们的生产环境取名为production)</p><p>在vite中的环境变量处理:</p><p>vite内置了dotenv这个第三方库。dotenv会自动读取 <code>.env文件</code>, 并解析这个文件中的对应环境变量 并将其注入到process对象下(但是vite考虑到和其他配置的一些冲突问题, 他不会直接注入到process对象下)</p><p>vite给我们提供了一些措施:我们可以调用vite的loadEnv来手动确认env文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig<span class="token punctuation">,</span> loadEnv <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> mode <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">//参数mode为开发模式或生产模式</span>
  <span class="token comment">//console.log(mode);  // development or product</span>
  
  <span class="token comment">//npm run dev --mode development 会将mode设置为development传递进来</span>
  
  <span class="token comment">// process.cwd() 获取当前vite的工作目录</span>
  <span class="token keyword">const</span> env<span class="token operator">=</span><span class="token function">loadEnv</span><span class="token punctuation">(</span>mode<span class="token punctuation">,</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 获取.env文件里定义的环境变量</span>
  <span class="token comment">//console.log(env);   //变量在命令行里打印出来</span>
  
  <span class="token keyword">return</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们调用loadenv的时候, 他会做如下几件事:</p><ol><li>直接找到.env文件 并解析其中的环境变量 并放进一个对象里</li><li>会将传进来的mode这个变量的值进行拼接: <code>.env.development</code>, 并根据我们提供的目录去取对应的配置文件并进行解析, 并放进一个对象</li></ol><ul><li>实际上就是先读取全局的.env文件，放进一个对象；再根据执行命令 <code>npm run dev --mode develop</code> 的mode找到对应 <code>.env.develop</code> 文件，读取开发环境的变量放入同一个对象，重复会进行覆盖。因为在package.json执行命令mode可以自定义，并且对应.env文件名也可以自定义，从而实现区分不同环境。</li></ul><p><strong>此外如果是客户端, vite会将对应的环境变量注入到 <code>i<wbr>mport.meta.env</code> 里去,这样就可以在项目文件里访问环境变量。</strong></p><p>vite做了一个拦截, 他为了防止我们将隐私性的变量直接送进i<wbr>mport.meta.env中, 所以他做了一层拦截, 如果你的环境变量不是以 <strong>VITE_ 开头</strong> 的, 他就不会帮你注入到客户端中去, 如果我们想要更改这个前缀, 可以去使用envPrefix配置</p><h2 id="vite对css的处理" tabindex="-1"><a class="header-anchor" href="#vite对css的处理" aria-hidden="true">#</a> vite对css的处理</h2><p>vite项目天生就支持对css文件的直接处理</p><ol><li><p>vite在读取到main.js中引用到了Index.css</p></li><li><p>直接去使用fs模块去读取index.css中文件内容</p></li><li><p>直接创建一个style标签, 将index.css中文件内容直接copy进style标签里</p></li><li><p>将style标签插入到index.html的head中</p></li><li><p>将该css文件中的内容直接替换为js脚本(方便热更新或者css模块化), 同时设置Content-Type为js 从而让浏览器以JS脚本的形式来执行该css后缀的文件</p></li></ol><p>由于多人合作时类名可能会重复导致样式混乱，所以vite也是支持 <strong>cssmodule</strong> css模块化 （全部都是基于node）</p><ol><li><code>xxx.module.css</code> ，不再直接引入，而是import模块化引入，使用时相当于对象的形式，样式类名变成了引入css模块的属性</li><li>他会将你的所有类名进行一定规则的替换（将footer 替换成 _footer_i22st_1）</li><li>同时创建一个映射对象{ footer: &quot;_footer_i22st_1&quot; }</li><li>将替换过后的内容塞进style标签里然后放入到head标签中 (能够读到index.html的文件内容)</li><li>将 <code>componentA.module.css</code> 内容进行全部抹除, 替换成JS脚本</li><li>将创建的映射对象在脚本中进行默认导出</li></ol><h2 id="vite的css配置" tabindex="-1"><a class="header-anchor" href="#vite的css配置" aria-hidden="true">#</a> vite的css配置</h2><p>在vite.config.js中我们通过css属性去控制整个vite对于css的处理行为,包括对<strong>cssmodule</strong>的处理配置，<strong>css预处理器</strong>全局执行参数的配置，以及postcss的配置。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>

<span class="token comment">// 引入预设环境包,里面包括css语法降级，编译插件等多种包</span>
<span class="token keyword">const</span> postcssPresetEnv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;postcss-preset-env&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">optimizeDeps</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 将指定数组中的依赖包不进行依赖预构建</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">envPrefix</span><span class="token operator">:</span> <span class="token string">&quot;ENV_&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 修改环境变量中的默认开头关键词</span>
  <span class="token literal-property property">css</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">localConvention</span><span class="token operator">:</span> <span class="token string">&quot;camelCaseOnly&quot;</span><span class="token punctuation">,</span> <span class="token comment">//修改生成的配置对象的key的展示形式(驼峰还是中划线形式)</span>
      <span class="token literal-property property">scopeBehaviour</span><span class="token operator">:</span> <span class="token string">&quot;local&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 配置当前的模块化行为是模块化还是全局化 </span>
      <span class="token comment">// (有hash就是开启了模块化的一个标志, 因为他可以保证产生不同的hash值来控制我们的样式类名不被覆盖)</span>
      <span class="token comment">// generateScopedName: 生成的类名的规则(可以配置为函数, 也可以配置成字符串规则</span>
      <span class="token literal-property property">hashPrefix</span><span class="token operator">:</span> <span class="token string">&quot;xxx&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 参与生成css的hash类名生成，加密保护安全性更高</span>
      <span class="token literal-property property">globalModulePaths</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">&quot;./componentA.module.css&quot;</span><span class="token punctuation">}</span> <span class="token comment">// 代表你不想参与到css模块化的路径</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">preprocessorOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">less</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 整个配置对象最终都会传给less作为编译时的配置参数</span>

         <span class="token comment">// 这是直接给less配置，事实上在webpack我们给less-loader配置即可</span>
        <span class="token literal-property property">math</span><span class="token operator">:</span> <span class="token string">&quot;always&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 总是处理数学公式</span>
        globalVars：<span class="token punctuation">{</span> <span class="token comment">// 全局变量</span>
          <span class="token literal-property property">myColor</span><span class="token operator">:</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">devSourcemap</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 开启编译后的css对源文件里面内容的索引</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// vite配置优先级更高，如果这里没有配置，vite会尝试读取工作目录下的postcss.config.js</span>
    <span class="token literal-property property">postcss</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">postcssPresetEnv</span><span class="token punctuation">(</span><span class="token comment">/* optionsObject */</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="扩展-postcss-介绍" tabindex="-1"><a class="header-anchor" href="#扩展-postcss-介绍" aria-hidden="true">#</a> 扩展：postcss 介绍</h2><p><strong>postcss 与 css 的关系相当于 babel 与 js 的关系</strong></p><p>postcss 的功能就是对我们书写的css代码进行转换，将一些未来的，实验性的css代码进行降级，转换为低版本浏览器也可以认识的css文件，保证css在各版本浏览器执行起来是万无一失的。</p><p>事实上在早期postcss有插件可以处理less和sass语法，可以一步到位直接从less/sass转css再降级转换，但随着less/sass的不断更新导致的同步语法困难性，这些插件最终也是停止维护了，目前的做法是书写的less和sass语法通过各自的预处理器转换为css后再交给postcss处理。postcss只用专心研究如何将css进行转换降级即可，所以业内就产生了一个新的说法: 说 <strong>postcss是后处理器</strong></p><p><strong>使用postcss</strong></p><ol><li>安装依赖</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装postcss和相关脚手架和预设环境</span>
<span class="token function">npm</span> <span class="token function">install</span> postcss postcss-cli postcss-preset-env <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>书写描述文件</li></ol><p>postcss配置文件： <code>postcss.config.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// postcss.config.js</span>

<span class="token comment">// 引入预设环境包,里面包括css语法降级，编译插件等多种包</span>
<span class="token keyword">const</span> postcssPresetEnv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;postcss-preset-env&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">postcssPresetEnv</span><span class="token punctuation">(</span><span class="token comment">/* optionsObject */</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vite静态资源及别名配置" tabindex="-1"><a class="header-anchor" href="#vite静态资源及别名配置" aria-hidden="true">#</a> vite静态资源及别名配置</h2><p>在vite.config.js中可以通过 <code>resolve.alias</code> 配置路径别名，加载资源时直接使用别名引入路径而不要使用多层级相对路径形式。同时也可以配置一些静态资源打包规则。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 配置路径别名</span>
      <span class="token string-property property">&quot;@&quot;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;@assets&quot;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./src/assets&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> 
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">build</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">assetsInlineLimit</span><span class="token operator">:</span> <span class="token number">4096</span><span class="token punctuation">,</span> <span class="token comment">// 4kb 控制静态资源中低于设定大小的图片转换为base64格式</span>
    <span class="token literal-property property">outDir</span><span class="token operator">:</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 打包的输出文件夹名称</span>
    <span class="token literal-property property">assetsDir</span><span class="token operator">:</span> <span class="token string">&#39;static&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 打包的输出文件夹里存放静态资源的文件夹名称</span>
    emptyDir：<span class="token boolean">true</span> <span class="token comment">// 打包时先清除dist目录下的所有文件</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vite插件" tabindex="-1"><a class="header-anchor" href="#vite插件" aria-hidden="true">#</a> vite插件</h2><p>vite会在生命周期的不同阶段去调用不同的插件以达到不同的目的，所以插件就是在生命周期的一定阶段执行从而实现相关功能的库。</p><p>可能会遇到插件与npm版本不兼容问题 nvm: node的一个版本管理工具，需要和node一样从网上全局下载安装</p><p>vite常用插件： <strong>vite-aliases</strong> <strong>vite-plugin-html</strong> <strong>vite-plugin-mock</strong></p><p>vite-aliases：此插件会读取src目录下的文件夹命名，帮助我们进行目录别名转换，例如将src替换为@，/src/assets替换为@assets</p><p>vite-plugin-html：此插件帮助我们给项目的网页名通过变量指定 此插件使用时需要修改项目index.html的title标签内容为 <code>&lt;%= title %&gt;</code>（ejs语法）,之后在vite.config.js指定变量具体值即可。</p><p>vite-plugin-mock: 此插件帮助我们mock接口数据，其依赖项就是mockjs，所以两个包都需要安装</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig<span class="token punctuation">,</span> UserConfigExport<span class="token punctuation">,</span> ConfigEnv <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ViteAliases <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite-aliases&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createHtmlPlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite-plugin-html&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> viteMockServe <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite-plugin-mock&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> command <span class="token punctuation">}</span><span class="token operator">:</span> ConfigEnv<span class="token punctuation">)</span><span class="token operator">:</span> UserConfigExport<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">ViteAliases</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">createHtmlPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token doc-comment comment">/**
       * 需要注入 index.html ejs 模版的数据
       */</span>
      <span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;我是项目标题&#39;</span><span class="token punctuation">,</span>
          <span class="token comment">// injectScript: \`&lt;script src=&quot;./inject.js&quot;&gt;&lt;/script&gt;\`,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">viteMockServe</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">// 默认会去找/mock/ 与/src同级</span>
        <span class="token comment">// default</span>
        <span class="token literal-property property">mockPath</span><span class="token operator">:</span> <span class="token string">&#39;mock&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">localEnabled</span><span class="token operator">:</span> command <span class="token operator">===</span> <span class="token string">&#39;serve&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 匹配启动服务器的命令</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// /mock/index.ts</span>
<span class="token comment">/*
{
  // 请求地址
  url: string;
  // 请求方式
  method?: MethodType;
  // 设置超时时间
  timeout?: number;
  // 状态吗
  statusCode?:number;
  // 响应数据（JSON）
  response?: ((opt: { [key: string]: string; body: Record&lt;string,any&gt;; query:  Record&lt;string,any&gt;, headers: Record&lt;string, any&gt;; }) =&gt; any) | any;
  // 响应（非JSON）
  rawResponse?: (req: IncomingMessage, res: ServerResponse) =&gt; void;
}
*/</span>


<span class="token keyword">import</span> <span class="token punctuation">{</span> MockMethod <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite-plugin-mock&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    url<span class="token operator">:</span> <span class="token string">&#39;/api/get&#39;</span><span class="token punctuation">,</span>
    method<span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">response</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> query <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        code<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        data<span class="token operator">:</span> <span class="token punctuation">{</span>
          name<span class="token operator">:</span> <span class="token string">&#39;vben&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    url<span class="token operator">:</span> <span class="token string">&#39;/api/post&#39;</span><span class="token punctuation">,</span>
    method<span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
    timeout<span class="token operator">:</span> <span class="token number">2000</span><span class="token punctuation">,</span>
    response<span class="token operator">:</span> <span class="token punctuation">{</span>
      code<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      data<span class="token operator">:</span> <span class="token punctuation">{</span>
        name<span class="token operator">:</span> <span class="token string">&#39;vben&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    url<span class="token operator">:</span> <span class="token string">&#39;/api/text&#39;</span><span class="token punctuation">,</span>
    method<span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">rawResponse</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> reqbody <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
      <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          reqbody <span class="token operator">+=</span> chunk
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;text/plain&#39;</span><span class="token punctuation">)</span>
      res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">200</span>
      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>reqbody<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span> <span class="token keyword">as</span> MockMethod<span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vite配置跨域" tabindex="-1"><a class="header-anchor" href="#vite配置跨域" aria-hidden="true">#</a> vite配置跨域</h2><p><strong>同源策略:</strong> 只有协议，域名，端口号相同的请求才会被浏览器解析，否则会被浏览器拦截（数据事实上已经返回了）。</p><p>配置跨域</p><p>当我们请求例如 127.0.0.1：5732/api/user 时，此配置会在本地开启一个代理服务器，代理服务器协议，域名，端口号都与此请求相同，所以浏览器请求代理服务器没有同源策略。而这个代理服务器接收到请求后查看配置发现路径开头出现了配置的 &#39;/api&#39;,所以代理服务器将请求的协议，域名，端口号替换为target 配置的内容。即请求变成了 http://www.baidu.com/api/user， 并且再次查看 rewrite 配置，将修改后的请求再次进行路径修改，最终将修改后的请求路径由代理服务器发给目标服务器（<strong>服务器间没有同源策略</strong>），拿到数据后代理服务器再返回给浏览器。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">server</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;/api&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;http://www.baidu.com&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否在请求目标服务器时将代理服务器的协议域名修改成与其一致</span>
        <span class="token function-variable function">rewrite</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/api</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,92),o=[p];function i(c,l){return s(),a("div",null,o)}const u=n(t,[["render",i],["__file","vite笔记.html.vue"]]);export{u as default};
