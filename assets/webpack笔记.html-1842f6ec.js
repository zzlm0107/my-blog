import{_ as n,p as s,q as a,a1 as e}from"./framework-5866ffd3.js";const p={},t=e(`<h1 id="webpack-笔记" tabindex="-1"><a class="header-anchor" href="#webpack-笔记" aria-hidden="true">#</a> webpack 笔记</h1><h2 id="webpack概述" tabindex="-1"><a class="header-anchor" href="#webpack概述" aria-hidden="true">#</a> webpack概述</h2><p>在没有使用打包工具前，我们可能会直接使用 <em>script标签</em> 引用各种包，但这可能会导致一些问题：</p><ul><li>无法直接体现，脚本的执行依赖于外部库。</li><li>如果依赖不存在，或者引入顺序错误，应用程序将无法正常运行。</li><li>如果依赖被引入但是并没有使用，浏览器将被迫下载无用代码。</li></ul><p>那么，我们就需要了解什么是打包/构建工具，因为浏览器只认识html，css ，js文件，而我们实际开发中所写的文件格式类型多种多样，所以就需要一个工具来将我们写的多种格式的代码进行转换，当然可能帮助我们管理引入的各种依赖包。而这就是打包工具的其中几个功能，具体可查看我的 <strong>vite笔记</strong> 篇。</p><p>来看webpack官网对自己的定义：</p><p>webpack 是一个用于现代 JavaScript 应用程序的 <strong>静态模块打包工具</strong>。当 webpack 处理应用程序时，它会在内部从一个或多个入口点构建一个 依赖图(dependency graph)，然后将你项目中所需的每一个模块组合成一个或多个 bundles，它们均为静态资源，用于展示你的内容。</p><p><strong>概念前提：</strong></p><ul><li>thunk：将...组合/结合,实际上就是指webpack的打包操作，一次chunk就是指一次完整的打包流程。</li><li>bundle：包，块，实际上就是指webpack打包完成的产物，是chunk完成后所输出的东西。</li></ul><h2 id="webpack简单使用" tabindex="-1"><a class="header-anchor" href="#webpack简单使用" aria-hidden="true">#</a> webpack简单使用</h2><p>先理清 <strong>webpack</strong> 和 <strong>webapck-cli</strong> 的区别：</p><p>webpack 是核心编译包，具有webpack的所有功能并进行封装，包含了多个处理转换的函数并将其暴露了出来，但如果我们直接使用就需要分别一次次调用这些函数，整个项目操作下来十分繁琐。</p><p>webapck-cli 是 webpack 的脚手架，将 webpack 的多个功能函数的调用通过命令的形式组合起来，只需运行一次命令就可以打包完整个项目，大大减少使用者的心智负担。</p><p>使用时，先初始化项目,然后下载 webpack 和 webapck-cli：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> init <span class="token parameter variable">-y</span>

<span class="token function">yarn</span> <span class="token function">add</span> webpack webpack-cli <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想要直接打包项目，运行 <code>npx webpack</code> 命令即可，开启一个node服务器（webpack运行在服务端，服务端才能读取文件），然后 webpack 会将我们的脚本 src/index.js 作为 入口起点，也会生成 dist/main.js 作为 输出。</p><h2 id="入口-entry" tabindex="-1"><a class="header-anchor" href="#入口-entry" aria-hidden="true">#</a> 入口 entry</h2><p><strong>入口就是告诉webpack从哪个模块构建他的内部依赖图。</strong> 默认是以 src/index.js 作为入口起点。</p><p>如果想要配置入口，可以在项目根目录下创建 <code>webpack.config.js</code> 配置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**type (import(&#39;webpack&quot;,Configuration)<span class="token punctuation">}</span> */</span>

modu1e<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&quot;/src/file/index.js&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>入口有三种写法：</p><ul><li>字符串写法：直接指明入口文件，即上述代码；</li><li>数组写法：将指明的多个文件合并到一个模块，相当于 import 引用，不常用</li><li>对象写法：可以配置入口的详情参数，较为重要</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**type (import(&#39;webpack&quot;,Configuration)<span class="token punctuation">}</span> */</span>

modu1e<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 入口的键 main 就是指代这次 chunk 流程</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;target.js&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 输出的文件名</span>
      <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">&quot;/src/file/index.js&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 入口文件</span>
      
      <span class="token comment">// webpack 打包时在读取一个依赖后会将其放到缓存里，如果再次读取则直接使用缓存，减少开销</span>
      <span class="token comment">// 不同的 chunk 流程 的缓存资源是分开的，但我们可以指明使用其他 chunk 流程 的缓存资源</span>
      <span class="token literal-property property">runtime</span><span class="token operator">:</span> <span class="token string">&quot;mainRuntime&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 指明此次 chunk 运行环境，有就复用，没有就生成一个</span>
      <span class="token comment">// dependOn: &quot;&quot; // 同样指明 chunk 运行环境，但环境必须存在，否则报错，与 runtime 配置只能存一</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="出口-output" tabindex="-1"><a class="header-anchor" href="#出口-output" aria-hidden="true">#</a> 出口 output</h2><p>output 属性告诉 webpack 在哪里输出它所创建的 bundle，以及如何命名这些文件。主要输出文件的默认值是 ./dist/main.js，其他生成文件默认放置在 ./dist 文件夹中。</p><p>当仅有一个入口文件配置时</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./path/to/my/entry/file.js&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;my-first-webpack.bundle.js&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当有多个入口文件配置时,即存在多个 chunk 流程则需要使用占位符来确保每个文件具有唯一的名称。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">app</span><span class="token operator">:</span> <span class="token string">&#39;./src/app.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">search</span><span class="token operator">:</span> <span class="token string">&#39;./src/search.js&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;[name].js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> __dirname <span class="token operator">+</span> <span class="token string">&#39;/dist&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 写入到硬盘：./dist/app.js, ./dist/search.js</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="理解dependencies和devdependencies" tabindex="-1"><a class="header-anchor" href="#理解dependencies和devdependencies" aria-hidden="true">#</a> 理解dependencies和devDependencies</h2><p>简单理解：</p><ul><li>dependencies 里放置的都是生产依赖</li><li>devDependencies 里放置的都是开发依赖</li></ul><p>提问： 如果将package.json中的 dependencies 里的依赖包放到 devDependencies 里，还能正常打包构建吗？<br> 回答：是可以正常打包的，打完后的包也能正常运行</p><p><em>这么看似乎一直以来上面的说法不对？</em><br> 首先，我们要明白 package.json 是 npm 所需要的，是我们发包时必须具备的，我们发布的包如果有依赖，则必须放到 package.json 中的 dependencies 里。这样别人下载我们的包会一并下载依赖，确保我们的包是可用的。如果我们不发包，package.json 事实上是可有可无的。<br> 并且，打包构建是 webpack 的事情，它根本就不需要查看 package.json。</p><p>不过，以上的说法都是针对于<strong>客户端环境</strong>来说的，客户端开发一定是已经下载好了各种依赖包，打包工具再根据文件引入将依赖包一并打包。实际开发中还有<strong>服务端渲染（ssr）</strong>，服务端渲染会查看 package.json 中的 dependencies 下载生产依赖包，所以在这种服务端环境下必须正确放置，否则会报错。</p><p>所以说，实际上客户端开发是可以乱放的，但为了<strong>规范化</strong>，我们还是要正确放置对应的生产依赖和开发依赖。</p><h2 id="loader处理css文件" tabindex="-1"><a class="header-anchor" href="#loader处理css文件" aria-hidden="true">#</a> loader处理css文件</h2><p>webpack 只能理解 JavaScript 和 JSON 文件，其他类型的文件是不认识的。<strong>loader</strong> 让 webpack 能够去处理其他类型的文件，并将它们转换为有效 模块，以供应用程序使用，以及被添加到依赖图中。</p><p>也就是说，loader 用于对模块的源代码进行转换。loader 可以使你在 <code>import</code> 或 &quot;load(加载)&quot; 模块时预处理文件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">&#39;css-loader&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 直接指定对应loader</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>     <span class="token comment">// 指定多个loader时从后往前依次调用，处理结果交给上一个loader</span>
          <span class="token punctuation">{</span> <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;style-loader&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// style-loader将css语法添加到创建的style标签中，并放到页面上</span>
          <span class="token punctuation">{</span>
            <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span> <span class="token comment">// css-loader将css语法处理为兼容性更好的css语法</span>
            <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token boolean">true</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span> <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;sass-loader&#39;</span> <span class="token punctuation">}</span> <span class="token comment">// sass-loader将sass语法处理为css语法</span>
        <span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外还有一些其他的loader</p><p><strong>mini-css-extract-plugin:</strong> 将css-loader处理产生的结果输出为css文件，详细用法在 npm官网 搜索查看。</p><p><strong>file-loader：</strong> 将 import/require 引入的文件（先经过其他loader处理后）在打包后转换成一个独立文件。</p><h2 id="css模块化" tabindex="-1"><a class="header-anchor" href="#css模块化" aria-hidden="true">#</a> css模块化</h2><p>因为项目开发中多个页面我们会写出多个对应的css文件，webpack直接打包完成后会将这些css文件整合到一起，如果不同页面类名重复，则会导致样式混乱，所以在不同页面引入时需要开启css模块化。模块化开启后会给每个css文件添加一个hash，用于区分不同文件，相关用法参考 <strong>vite笔记</strong> 篇。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span> <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment">// 添加配置项，开启模块化</span>
        <span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,46),o=[t];function c(l,r){return s(),a("div",null,o)}const u=n(p,[["render",c],["__file","webpack笔记.html.vue"]]);export{u as default};
