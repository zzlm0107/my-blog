import{_ as n,p as s,q as a,a1 as e}from"./framework-5866ffd3.js";const t={},p=e(`<h2 id="vue2项目启动的一些配置" tabindex="-1"><a class="header-anchor" href="#vue2项目启动的一些配置" aria-hidden="true">#</a> vue2项目启动的一些配置</h2><h3 id="vue-cli建立项目" tabindex="-1"><a class="header-anchor" href="#vue-cli建立项目" aria-hidden="true">#</a> vue/cli建立项目</h3><p>（已经安装就不在需要此步骤，通过 <strong>vue --version</strong> 查看）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm i -g @vue/cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后在cmd命令行窗口中合适的文件夹下新建项目。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>vue create &lt;项目名称（不能含有大写英文，中文）&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="手动选择配置项" tabindex="-1"><a class="header-anchor" href="#手动选择配置项" aria-hidden="true">#</a> 手动选择配置项</h3><p>初次建立项目时，可以选择自己定义配置项，通过勾选 <strong>Manually select features</strong> 开启手动选择。个人建议配置如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>(*) Babel
( ) TypeScript
( ) Progressive Web App (PWA) Support
(*) Router
(*) Vuex
(*) CSS Pre-processos   //开启css预处理器
(*) Linter/Formatter    //开启eslint代码校验
( ) Unit Testing
( ) E2E Testing
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>选择vue2还是vue3项目；</p><p>是否选择history路由模式，推荐 否，选择hash模式更简单；</p><p>选择css预处理器，按个人需求，个人喜欢sass；</p><p>选择代码校验风格，推荐ESLint + Standard config 标准代码风格；</p><p>选择校验时机，建议两个都选；</p><p>选择各种工具的配置替代，选第一个（依赖插件或者工具的配置文件分文件保存）；</p><p>选择是否记录以上操作，选择 否。</p><h2 id="eslint-代码校验的配置" tabindex="-1"><a class="header-anchor" href="#eslint-代码校验的配置" aria-hidden="true">#</a> ESLint 代码校验的配置</h2><p>**前言：**EsLint 可以帮助规范代码，团队协作时很有必要，十分建议开启，慢慢改善自己的编程陋习。</p><h3 id="关闭eslint代码校验" tabindex="-1"><a class="header-anchor" href="#关闭eslint代码校验" aria-hidden="true">#</a> 关闭ESLint代码校验</h3><p>在项目的<strong>vue.config.js</strong>文件里的 <strong>module.exports</strong> 配置选项里可以配置关闭ESLint校验。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>lintOnSave：false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="eslint对module模块报错" tabindex="-1"><a class="header-anchor" href="#eslint对module模块报错" aria-hidden="true">#</a> Eslint对module模块报错</h3><p>**解决办法：**在 .eslintrc.js 文件添加一行配置项取消对config文件的检查：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token string">&#39;@babel/eslint-parser&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">requireConfigFile</span><span class="token operator">:</span> <span class="token boolean">false</span>              <span class="token comment">//取消必须config配置文件</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装并配置完成 ESLint 后，我们继续回到 VSCode 进行扩展设置，依次点击 文件 &gt; 首选项 &gt; 设置 打开 VSCode 配置文件,添加如下配置</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;editor.codeActionsOnSave&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;source.fixAll.eslint&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样每次保存的时候就可以根据根目录下.eslintrc.js你配置的eslint规则来检查和做一些简单的fix。</p><h2 id="less公共文件的自动化导入" tabindex="-1"><a class="header-anchor" href="#less公共文件的自动化导入" aria-hidden="true">#</a> Less公共文件的自动化导入</h2><p><strong>前言：<strong>在使用less时，我们有时候会抽提一些公共的变量或者样式到一个全局less文件中，需要使用时就可以使用</strong>@import &#39; 文件路径 &#39;</strong> 来单独导入，但当多次使用时每个.vue文件都引入就会很麻烦。</p><p>我们可以在vue项目的 <strong>src/assets/styles/variables.less</strong> 放置全局公共样式。</p><p>在当前项目下执行一下命令 <strong>vue add style-resources-loader</strong> ，选择less为预处理器，添加一个vuecli的插件。</p><p>安装完毕后会在vue.config.js中自动添加配置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">pluginOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;style-resources-loader&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">preProcessor</span><span class="token operator">:</span> <span class="token string">&#39;less&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">patterns</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token comment">// 需要全局自动导入的文件的路径</span>
        path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./src/assets/styles/variables.less&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./src/assets/styles/mixins.less&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="scss公共文件的全局导入" tabindex="-1"><a class="header-anchor" href="#scss公共文件的全局导入" aria-hidden="true">#</a> Scss公共文件的全局导入</h2><p>当我使用vue3-cli构建项目时，选择sass作为css样式，scss-loader作为预处理器，那么直接在vue.config.js添加下面代码即可全局导入。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@vue/cli-service&#39;</span><span class="token punctuation">)</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">transpileDependencies</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">css</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">loaderOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">sass</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// 支持多个scss样式文件，</span>
        <span class="token comment">// eslint-disable-next-line quotes</span>
        <span class="token literal-property property">additionalData</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">@import &#39;@/styles/mixin.scss&#39;; @import &#39;@/styles/variables.scss&#39;;</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的相关版本</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;sass&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^1.32.7&quot;</span><span class="token punctuation">,</span>
<span class="token property">&quot;sass-loader&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^12.0.0&quot;</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="设置项目src文件路径为" tabindex="-1"><a class="header-anchor" href="#设置项目src文件路径为" aria-hidden="true">#</a> 设置项目src文件路径为@</h2><p>**前言：**这是为了当我们使用路径别名@的时候可以提示路径，比较方便。</p><p>在 <strong>jsconfig.json</strong> 文件中添加下面配置即可：（vue3项目已经自行配置完毕，无需改动）</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;baseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;paths&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;@/*&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./src/*&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;exclude&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;node_modules&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;dist&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vue配置devserver实现跨域" tabindex="-1"><a class="header-anchor" href="#vue配置devserver实现跨域" aria-hidden="true">#</a> vue配置devServer实现跨域</h2><p><strong>前言：<strong>跨域问题是我们经常会碰到的一个问题，这主要是浏览器的同源政策限制的，同源政策要求必须</strong>协议，域名，端口号</strong>三者都相同才能正常访问，（服务器与服务器的访问不受限制）但往往前端和后端并不会如此，所以我们必须解决跨域问题。跨域问题可以通过后端配置解决，也可以在前端解决。</p><p>在 vue.config.js 中我们可以通过在本地开启一个代理服务器实现跨域：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//开启代理服务器</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;/api&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">//当匹配到端口号后面出现/api时，即走代理服务器请求target地址</span>
        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39; https://mock.presstime.cn/mock/62bd428e0a8ecd0022c95c5d/api &#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;^/api&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 可以将匹配到的端口号后面的/api替换为空</span>
        <span class="token literal-property property">ws</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">//用于支持websocket</span>
        <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span><span class="token boolean">true</span>  <span class="token comment">//是否在请求时修改代理服务器的host地址与target地址一致</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="封装axios并添加加载进度条" tabindex="-1"><a class="header-anchor" href="#封装axios并添加加载进度条" aria-hidden="true">#</a> 封装Axios并添加加载进度条</h2><p>**前言：**开始项目时常常需要封装一个Axios实例用来发送api请求。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 对于axios进行二次封装</span>
<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span>
<span class="token comment">// 引入进度条</span>
<span class="token keyword">import</span> nprogress <span class="token keyword">from</span> <span class="token string">&#39;nprogress&#39;</span>
<span class="token comment">// 引入进度条样式</span>
<span class="token keyword">import</span> <span class="token string">&#39;nprogress/nprogress.css&#39;</span>


<span class="token keyword">const</span> localhost <span class="token operator">=</span> <span class="token string">&#39;http://127.0.0.1:8080/api&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 利用axios对象的方法create，创建一个axios实例</span>
<span class="token comment">// 进行简单配置</span>
<span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// 基础路径</span>
    <span class="token literal-property property">baseURL</span><span class="token operator">:</span> localhost<span class="token punctuation">,</span>
    <span class="token comment">// 设置请求超时时间</span>
    <span class="token literal-property property">timeout</span><span class="token operator">:</span><span class="token number">5000</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 请求拦截器:在发送请求之前，请求拦截器可以检测到并在请求发送出去之前做一些处理</span>
instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">// 进度条开始启动</span>
    nprogress<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// ...如添加请求头携带token等一些逻辑</span>
    
    <span class="token keyword">return</span> config<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 响应拦截器</span>
instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">// 成功的回调函数，服务器相应数据返回时，响应拦截器可以检测到并做一些处理</span>
    
    <span class="token comment">// 进度条结束</span>
    nprogress<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">// 失败的回调函数</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;axios响应失败&#39;</span><span class="token operator">+</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;请求未能成功&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 对外暴露instance实例</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> instance<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vue2路由重复点击报错" tabindex="-1"><a class="header-anchor" href="#vue2路由重复点击报错" aria-hidden="true">#</a> vue2路由重复点击报错</h2><p>**解决方法：**在引入使用VueRouter的 js文件中重写路由跳转方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 重写push和replace方法，解决路由重复产生的报错</span>
<span class="token keyword">const</span> originalPush <span class="token operator">=</span> <span class="token class-name">VueRouter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push
<span class="token keyword">const</span> originalReplace <span class="token operator">=</span> <span class="token class-name">VueRouter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>replace

<span class="token class-name">VueRouter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">location</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">originalPush</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token class-name">VueRouter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">replace</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token parameter">location</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">originalReplace</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 配置路由</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    routes<span class="token punctuation">,</span>
    <span class="token comment">//滚动行为，控制详情页跳转时的滚轮所处位置</span>
    <span class="token function">scrollBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 始终滚动到顶部，vue2</span>
      <span class="token comment">// vue3的写法为 return { left:0, top:0 }</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> router<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="局域网下访问本地vue项目" tabindex="-1"><a class="header-anchor" href="#局域网下访问本地vue项目" aria-hidden="true">#</a> 局域网下访问本地vue项目</h2><p>**前言：**在前端开发时有时候需要将本地项目的开发进度或页面分享给boss或是后端查看，所以就需要配置将本地项目可以在局域网下打开访问。</p><p>vue项目启动完成时在终端上会出现两个地址，第一个是本地访问地址，而第二个就是局域网访问地址。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- Local:   http://localhost:8080/    
- Network: http://192.168.2.218:8080/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但我们在同一局域网另一台电脑或手机直接访问第二个地址是无法访问成功的，探究原因发现是需要在本地电脑上取消防火墙，配置开放项目运行时端口号对应的入站和出站规则（两者配置方式基本一样）：</p><p><em><strong>控制面板 ---&gt; Windows Defender防火墙 ---&gt; 高级设置 ---&gt; 入站/出站规则 ---&gt; 新建规则 ---&gt; 选择端口 ---&gt; 选择TCP ---&gt; 输入开放的端口号（即项目运行端口号） ---&gt; 允许连接 ---&gt; 选择开放场景（可以全选） ---&gt; 输入规则名称和描述 ---&gt; 完成</strong></em></p><p>配置完成后重启本地项目，之后在局域网下其他电脑手机发现也可以访问到了。</p><p>（网上的一些在vue.config.js里的dev配置项里配置host为0.0.0.0/本机IP地址或package.json中修改serve脚本加上 --host=本地IP地址本人测试无效，可能是有其他原因没有成功。）</p>`,60),o=[p];function i(c,l){return s(),a("div",null,o)}const u=n(t,[["render",i],["__file","vue2项目简单启动.html.vue"]]);export{u as default};
