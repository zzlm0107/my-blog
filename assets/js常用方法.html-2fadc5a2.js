import{_ as e,p as r,q as o,a1 as d}from"./framework-5866ffd3.js";const a={},t=d('<h2 id="字符串方法" tabindex="-1"><a class="header-anchor" href="#字符串方法" aria-hidden="true">#</a> 字符串方法</h2><h3 id="查找" tabindex="-1"><a class="header-anchor" href="#查找" aria-hidden="true">#</a> 查找</h3><p>str.<code>charAt</code>(2) == str[2]     返回字符串指定位置的字符</p><p>str.<code>includes</code>(searchStr, position?)     判断是否包含指定子串</p><p>str.<code>indexOf</code>(searchStr, position?)     返回指定字串第一次出现的开始索引，没有返回-1</p><p>str.<code>lastIndexOf</code>(searchStr, position?)     返回指定字串最后一次出现的开始索引,没有返回-1</p><p>str.<code>search</code>(regexp)     返回正则第一次匹配到的索引，没有返回-1</p><br><h3 id="其他常用方法" tabindex="-1"><a class="header-anchor" href="#其他常用方法" aria-hidden="true">#</a> 其他常用方法</h3><p>str.<code>toLowerCase</code>()     返回字符串的全小写格式</p><p>str.<code>toUpperCase</code>()     返回字符串的全大写格式</p><p>str.<code>trim</code>()     清除字符串两边可能存在的空格</p><p>str.<code>trimStart</code>()     清除字符串开头可能存在的空格</p><p>str.<code>trimEnd</code>()     清除字符串结尾可能存在的空格</p><p>str.<code>concat</code>(str2,[...strN])     字符串拼接，返回拼接完的新字符串</p><p>str.<code>repeat</code>(count)     返回重复指定次数的新字符串</p><p>str.<code>substring</code>(indexStart[, indexEnd])     返回指定开始位置到指定结束（不包括）的子串，不影响原来的</p><p>str.<code>slice</code>(beginIndex[, endIndex])     返回指定开始位置到指定结束（不包括）的子串，不影响原来的</p><p>str.<code>split</code>(separator[, limit])     返回以指定字符分隔后的数组</p><p>str.<code>stratsWith</code>(searchStr,index?)<br> str.<code>endsWith</code>(searchStr,length?)</p><p>判断字符串是否以指定子串开头/结尾，index表示搜索位置，默认0 length表示设置字符串结尾位置</p><p>str.<code>replace</code>(regexp|substr, newSubStr|function)</p><p>匹配指定的字符串或正则表达式，并用新的字符串代替</p><p><br><br></p><h2 id="数组方法" tabindex="-1"><a class="header-anchor" href="#数组方法" aria-hidden="true">#</a> 数组方法</h2><h3 id="增加元素" tabindex="-1"><a class="header-anchor" href="#增加元素" aria-hidden="true">#</a> 增加元素</h3><p><em>arr.<code>push</code>(item)</em>     增加元素到数组末尾</p><p><em>arr.<code>unshift</code>(item)</em>     增加元素到数组开头</p><br><h3 id="删除元素" tabindex="-1"><a class="header-anchor" href="#删除元素" aria-hidden="true">#</a> 删除元素</h3><p><em>arr.<code>pop</code>()</em>     删除末尾元素</p><p><em>arr.<code>shift</code>()</em>     删除开头元素</p><p><em>arr.<code>splice</code>(start, deleteCount?, item?)</em></p><p>从哪个下标位置开始（包括），删几个，增加的元素（多选）。对原数组做修改</p><br><h3 id="修改元素" tabindex="-1"><a class="header-anchor" href="#修改元素" aria-hidden="true">#</a> 修改元素</h3><p>数组下标直接修改</p><br><h3 id="查找元素" tabindex="-1"><a class="header-anchor" href="#查找元素" aria-hidden="true">#</a> 查找元素</h3><p><em>arr.<code>find</code>( (element, index?, array?) =&gt; { /</em> … <em>/ } )</em><br><em>arr.<code>findLast</code>( (element, index?, array?) =&gt; { /</em> … <em>/ } )</em></p><p>返回符合回调函数的第一个元素/最后一个元素的 <strong>值</strong> ，没有返回undefind 回调函数需要返回一个Boolean值</p><p><em>arr.<code>findIndex</code>((element, index, array) =&gt; { /</em> … <em>/ } )</em><br><em>arr.<code>findLastIndex</code>((element, index, array) =&gt; { /</em> … <em>/ } )</em></p><p>返回符合回调函数的第一个元素/最后一个元素的 <strong>索引</strong>，没有返回-1 回调函数需要返回一个Boolean值</p><p><em>arr.<code>includes</code>(searchElement, fromIndex?)</em></p><p>判断数组中是否 <strong>包含</strong> 指定元素</p><p><em>arr.<code>indexOf</code>(searchElement, fromIndex?)</em><br><em>arr.<code>lastIndexOf</code>(searchElement, fromIndex?)</em></p><p>返回数组中指定元素的第一个/最后一个 <strong>索引</strong>,没有返回-1</p><br><h3 id="遍历数组" tabindex="-1"><a class="header-anchor" href="#遍历数组" aria-hidden="true">#</a> 遍历数组</h3><p><em>arr.<code>forEach</code>((element, index?, array?) =&gt; { /</em> … <em>/ })</em></p><p>对数组的每个元素执行一次给定的函数，没有返回值</p><p><em>arr.<code>every</code>((element, index, array) =&gt; { /</em> … <em>/ } )</em></p><p>测试数组内是否所有元素都能通过指定函数,返回Boolean值</p><p><em>arr.<code>some</code>((element, index, array) =&gt; { /</em> … <em>/ } )</em></p><p>测试数组内是否至少有一个元素可以通过指定函数,返回Boolean值</p><p><em>arr.<code>filter</code>((element, index, array) =&gt; { /</em> … <em>/ } )</em></p><p>测试数组内的每个元素是否可以通过指定函数，返回由通过元素组成的数组</p><p><em>arr.<code>map</code>((element, index, array) =&gt; { /</em> … <em>/ })</em></p><p>对数组的每个元素执行一次给定的函数，并将每个元素执行返回的值组成一个新数组</p><p><em>arr.<code>reduce</code>((previousValue, currentValue, currentIndex, array) =&gt; { /</em> … <em>/ }, initialValue?)</em></p><p>对数组中的每个元素按序执行一次指定函数，并且每次都会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值。若不传初始值initialValue，则将数组索引为 0 的元素作为初始值，从索引 1 元素开始执行函数。</p><br><h3 id="其他常用方法-1" tabindex="-1"><a class="header-anchor" href="#其他常用方法-1" aria-hidden="true">#</a> 其他常用方法</h3><p><strong>数组拼接:</strong><br><em>arr.<code>concat</code>(value0, value1, /</em> … ,<em>/ valueN)</em></p><p><strong>数组转字符串</strong>，参数为分隔符，不传分隔符是逗号<br><em>arr.<code>join</code>(&#39;-&#39;)</em></p><p><strong>数组翻转:</strong><br><em>arr.<code>reverse()</code></em></p><p><strong>数组截取:</strong><br><em>arr.<code>slice</code>(start, end)</em></p><p><strong>数组升序排序:</strong><br><em>arr.<code>sort</code>((a, b) =&gt; { return a - b } )</em></p><p><strong>数组降序排序:</strong><br><em>arr.<code>sort</code>((a, b) =&gt; { return b - a } )</em></p><p><strong>获取所有的键:</strong><br><em>arr.<code>keys()</code></em></p><p><strong>获取所有的值:</strong><br><em>arr.<code>values()</code></em></p><p><strong>数组判断:</strong><br><em><code>Array.isArray</code>(arr)</em></p><p><br><br></p><h2 id="对象方法" tabindex="-1"><a class="header-anchor" href="#对象方法" aria-hidden="true">#</a> 对象方法</h2><p><strong>对象拷贝（浅拷贝）</strong> 将所有可枚举的自有属性从原对象拷贝到目标对象上<br><em><code>Object.assgin</code>(target,sources)</em></p><p><strong>对象属性存在判断</strong><br><em><code>Object.hasOwn</code>(instance, prop)</em><br><em>obj.<code>hasOwnProperty</code>(prop)</em></p><p><strong>对象原型链关系判断</strong> 测试一个对象是否存在于另一个对象的原型链上<br><em>prototypeObj.<code>isPrototypeOf</code>(object)</em></p><p><strong>获取所有的键</strong><br><em><code>Object.keys</code>(obj)</em> 返回可枚举属性的数组<br><em><code>Object.getOwnPropertyNames</code>(obj)</em> 返回所有自身属性的数组(包括不可枚举属性,不包括Symbol)<br><em><code>Object.getOwnPropertySymbols</code>(obj)</em> 返回Symbol属性的数组</p><p><strong>获取所有的值（浅层）</strong><br><em><code>Object.values</code>(obj)</em></p>',79),c=[t];function n(p,s){return r(),o("div",null,c)}const i=e(a,[["render",n],["__file","js常用方法.html.vue"]]);export{i as default};
